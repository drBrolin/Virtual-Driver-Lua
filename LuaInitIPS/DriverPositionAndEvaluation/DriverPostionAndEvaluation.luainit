dofile(scriptPath.."/../helpFunctions.lua"); --Handles functions for input

function initPlugin()

	--Create scene
	command1 = Plugin.createCommand("createDriverScene()")
	Plugin.addToMenu('Vehicle Ergonomics.Posture Position from File', command1)
	
	command1:setMenuText("Create Static Driver Scene")
	command1:setHelpText("Create necessary geometries and attachment points for driver simulation.")
	command1:setHelpTextInToolbar(true) -- otherwise only displayed for menu items
	command1:setToolTipText("Create necessary geometries and attachment points for driver simulation.")
	command1:setToolTipInMenu(true) -- otherwise only displayed for toolbar buttons
	command1:setHotkeyName("Posture Position from File.Create Driver Scene") -- Name of hotkey combination in preferences -> hotkeys dialog
	
	--Attach manikins to attachment points 
	command2 = Plugin.createCommand("attachManikinDriver()")
	Plugin.addToMenu('Vehicle Ergonomics.Posture Position from File', command2)
	
	command2:setMenuText("Attach manikin(s)")
	command2:setHelpText("Attach manikin(s) to driver position.")
	command2:setHelpTextInToolbar(true) -- otherwise only displayed for menu items
	command2:setToolTipText("Attach manikin(s) to driver position.")
	command2:setToolTipInMenu(true) -- otherwise only displayed for toolbar buttons
	command2:setHotkeyName("Posture Position from File.Attach manikin(s)") -- Name of hotkey combination in preferences -> hotkeys dialog
	
	--Evaluate positions from file
	command3 = Plugin.createCommand("evaluateDriverPositions()")
	Plugin.addToMenu('Vehicle Ergonomics.Posture Position from File', command3)
	
	command3:setMenuText("Evaluate Driver Positions")
	command3:setHelpText("Evaluate driver positions defined in CSV file.")
	command3:setHelpTextInToolbar(true) -- otherwise only displayed for menu items
	command3:setToolTipText("Evaluate driver positions defined in CSV file.")
	command3:setToolTipInMenu(true) -- otherwise only displayed for toolbar buttons
	command3:setHotkeyName("Posture Position from File.Evaluate Driver Positions") -- Name of hotkey combination in preferences -> hotkeys dialog
	
end

--Global variables to save user selection
SelectedFamily = -1;
inputDataFile = scriptPath.."/defaultDriverScene.csv";

function createDriverScene()
	--Load files
	dofile(scriptPath.."/geometryImport.lua");
	dofile(scriptPath.."/outputDriverPosture.lua");
	
	--local filenameCSV = "defaultDriverScene.csv"; -- Could be changed to: static string Ips.inputOpenFile( string filter, string directory, string title )
	--local testDatafile = scriptPath.."/"..filenameCSV;
	
	local testDatafile = Ips.inputOpenFile("*.csv", scriptPath);
	inputDataFile = testDatafile;
	local lines = lines_from(testDatafile);

	local testId = NumberVector();
	local swDiameter = NumberVector();
	local swThickness = NumberVector();
	local swPositionX = NumberVector();
	local swPositionY = NumberVector();
	local swPositionZ = NumberVector();
	local swAngle = NumberVector();
	local seatPositionX = NumberVector();
	local seatPositionY = NumberVector();
	local seatPositionZ = NumberVector();
	local torsoAngle = NumberVector(); -- Not used yet
	local buttockAngle = NumberVector(); -- Not used yet
	local xBOF = NumberVector();
	local zAHP = NumberVector();
	local feetBOFAngle = NumberVector(); -- Not used yet
	local viewPointX = NumberVector();
	local viewPointY = NumberVector();
	local viewPointZ = NumberVector();

	-- print all line numbers and their contents
	for k,strLine in pairs(lines) do
		local iData = {};
		for iCells in (strLine .. ","):gmatch("([^,]*),") do 
			table.insert(iData, iCells);
		end
		if not(tonumber(iData[1]) == nil) then
			testId:push_back(tonumber(iData[1]));
			swDiameter:push_back(tonumber(iData[2]));
			swThickness:push_back(tonumber(iData[3]));
			swPositionX:push_back(tonumber(iData[4]));
			swPositionY:push_back(tonumber(iData[5]));
			swPositionZ:push_back(tonumber(iData[6]));
			swAngle:push_back(tonumber(iData[7]));
			seatPositionX:push_back(tonumber(iData[8]));
			seatPositionY:push_back(tonumber(iData[9]));
			seatPositionZ:push_back(tonumber(iData[10]));
			torsoAngle:push_back(tonumber(iData[11]));
			buttockAngle:push_back(tonumber(iData[12]));
			xBOF:push_back(tonumber(iData[13]));
			zAHP:push_back(tonumber(iData[14]));
			feetBOFAngle:push_back(tonumber(iData[15]));
			viewPointX:push_back(tonumber(iData[16]));
			viewPointY:push_back(tonumber(iData[17]));
			viewPointZ:push_back(tonumber(iData[18]));
		end
	end

	local simController = ManikinSimulationController();
	local attachmentsP = TreeObjectVector();

	-- Create the scene and position everything in initial position
	activeObject_SW = generateSteeringWheel(simController, attachmentsP, swDiameter[0], swThickness[0], {swPositionX[0], swPositionY[0], swPositionZ[0]}, swAngle[0]);
	activeObject_HpointTemplate = generateSeatHpointTemplate(attachmentsP, {seatPositionX[0], seatPositionY[0], seatPositionZ[0]} , buttockAngle[0], torsoAngle[0]);
	posObj_Feet = generateFloor(simController, attachmentsP, xBOF[0], seatPositionY[0], zAHP[0], feetBOFAngle[0]);
	viewPointVD = generateViewPoint(simController, attachmentsP, {viewPointX[0], viewPointY[0], viewPointZ[0]});

	-- Add shift gear and elbow rest surface
end

function attachManikinDriver()
	--Load files
	dofile(scriptPath.."/geometryImport.lua");
	dofile(scriptPath.."/outputDriverPosture.lua");
	
	fam = selectManikinFamily(); --VDE_DataHandler.lua
	
	--local root = Ips.getActiveObjectsRoot();
	
	local attachmentsP = TreeObjectVector();
	attachmentsVector = getAttachmentPoints(attachmentsP);

	if not(fam == nil) then
		fam:attachAndPosition(attachmentsVector); -- Attaching manikin to all attachment points
		Ips.updateScreen();
	else
		Ips.alert("You need to select a family first.");
	end
end

function evaluateDriverPositions()
	--Load files
	dofile(scriptPath.."/geometryImport.lua");
	dofile(scriptPath.."/outputDriverPosture.lua");
	
	inputAlternatives = StringVector();
	inputAlternatives:push_back("Yes");
	inputAlternatives:push_back("No");
	oldFile = Ips.inputDropDownList("Test data selection", "Should the previously selected file, be used? \n["..inputDataFile.."]", inputAlternatives);
	local testDatafile = "";
	local testStart = 0;
	if (oldFile == "Yes") then
		testStart = 1;
		testDatafile = inputDataFile;
	elseif (oldFile == "No") then
		testDatafile = Ips.inputOpenFile("*.csv", scriptPath);
	end
	
	local lines = lines_from(testDatafile);

	local testId = NumberVector();
	local swDiameter = NumberVector();
	local swThickness = NumberVector();
	local swPositionX = NumberVector();
	local swPositionY = NumberVector();
	local swPositionZ = NumberVector();
	local swAngle = NumberVector();
	local seatPositionX = NumberVector();
	local seatPositionY = NumberVector();
	local seatPositionZ = NumberVector();

	-- print all line numbers and their contents
	for k,strLine in pairs(lines) do
		local iData = {};
		for iCells in (strLine .. ","):gmatch("([^,]*),") do 
			table.insert(iData, iCells);
		end
		if not(tonumber(iData[1]) == nil) then
			testId:push_back(tonumber(iData[1]));
			--swDiameter:push_back(tonumber(iData[2]));
			--swThickness:push_back(tonumber(iData[3]));
			swPositionX:push_back(tonumber(iData[4]));
			swPositionY:push_back(tonumber(iData[5]));
			swPositionZ:push_back(tonumber(iData[6]));
			--swAngle:push_back(tonumber(iData[7]));
			seatPositionX:push_back(tonumber(iData[8]));
			seatPositionY:push_back(tonumber(iData[9]));
			seatPositionZ:push_back(tonumber(iData[10]));
	
		end
	end
	
	-- Sets up a CSV file to write to
	--local jointFilenameCSV = scriptPath.."/output/testDataJointAngles.csv"; -- Could be changed to: static string Ips.inputSaveFile( string filter, string directory, string title )
	local jointFilenameCSV = Ips.inputSaveFile("*.csv", scriptPath, "Select file to save evaluation data to");

	local jointAngleExportfile = io.open(jointFilenameCSV, "w");
	jointAngleExportfile:write("TestId,");
	for n = 0, fam:getNumJoints() - 1 do
		local jointName = fam:getJointName(n);
		local jointAngle = fam:getJointAngleForManikin(0, jointName); -- Just take the first manikin to check the nr of joint angles for each joint.
		for j = 0, jointAngle:size() - 1 do
			jointAngleExportfile:write(""..jointName.."_"..tostring(j)..",");
		end
	end
	jointAngleExportfile:write("HiptoEyeAngle,HeadAngle,NeckAngle,ThoraxAngle,AbdomenAngle,PelvisAngle,ThighAngle,RightKneeAngle,LeftKneeAngle,MidHipX,MidHipZ,MidEyeX,MidEyeZ");
	jointAngleExportfile:write("\n");

	local attachmentsP = TreeObjectVector();
	attachmentsP = getAttachmentPoints(attachmentsP);
	activeObject_SW = getPostionObject("VD_SteeringWheel");
	activeObject_HpointTemplate = getPostionObject("H-point template");

	for i = testStart, testId:size() - 1 do
		print("testId: "..tostring(testId[i]));
		jointAngleExportfile:write("testId"..tostring(i)..",");
		positionSW(activeObject_SW, swPositionX[i], swPositionY[i], swPositionZ[i]);
		positionSeat(activeObject_HpointTemplate, seatPositionX[i], seatPositionY[i], seatPositionZ[i]);
		
		fam:attachAndPosition(attachmentsP);
		Ips.updateScreen();
		
		for n = 0, fam:getNumJoints() - 1 do
			local jointName = fam:getJointName(n);
			local jointAngle = fam:getJointAngleForManikin(0, jointName);
			for j = 0, jointAngle:size() - 1 do
				jointAngleExportfile:write(tostring(jointAngle[j])..",");
			end
		end
		local HiptoEyeAngle = getDriverHiptoEyeAngleFunction(fam,0);
		local HeadAngle = getDriverHeadAngleFunction(fam,0);
		local NeckAngle = getDriverNeckAngleFunction(fam,0);
		local ThoraxAngle = getDriverThoraxAngleFunction(fam,0);
		local AbdomenAngle = getDriverAbdomenAngleFunction(fam,0);
		local PelvisAngle = getDriverPelvisAngleFunction(fam,0);
		local ThighAngle = getDriverThighAngleFunction(fam,0);
		local RightKneeAngle = getDriverRightKneeAngleFunction(fam,0);
		local LeftKneeAngle = getDriverLeftKneeAngleFunction(fam,0);
		local MidHip = getMidHipFunction(fam,0);
		local EyeSide = getEyeSideFunction(fam,0);
		jointAngleExportfile:write(tostring(HiptoEyeAngle)..","..tostring(HeadAngle)..","..tostring(NeckAngle)..","..tostring(ThoraxAngle)..","..tostring(AbdomenAngle)..","..tostring(PelvisAngle)..","..tostring(ThighAngle)..","..tostring(RightKneeAngle)..","..tostring(LeftKneeAngle)..","..tostring(MidHip[1])..","..tostring(MidHip[2])..","..tostring(EyeSide[1])..","..tostring(EyeSide[2]));
		jointAngleExportfile:write("\n");
	end
	jointAngleExportfile:close();
end

function getAttachmentPoints(attachmentsP)
	local root = Ips.getActiveObjectsRoot();
	local belowRoot = root:getNextSibling();
	local obj = root;

	while (not(obj == nil) and not(obj:equals(belowRoot))) do
		-- Get attributes and check if VD_attach is true
		--local pubAttributes = obj:getAllPublicAttributes();
		if (obj:getPublicAttributeValue("VD_attach") == "True") then
			print("VD_attach found");
			attachmentsP:push_back(obj);
		end
		obj = obj:getObjectBelow();
	end

	return attachmentsP;
end

function getPostionObject(objectName)
	root = Ips.getActiveObjectsRoot();
	posObject = root:findFirstMatch(objectName);
	return posObject;
end